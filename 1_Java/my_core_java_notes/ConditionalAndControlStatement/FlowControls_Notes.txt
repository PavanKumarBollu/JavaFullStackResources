Flow Controls Or Control Statements
===================================

flow controls are mainly used for executing the certain statements based on the some conditions or rules


flow controls dicides the order in which the control will be transffered.


flow controls
=============

a. Conditional statements

      1. if
      2. if else
      3. switch



b. Control statements

      1. for
      2. while
      3. dowhile
      4. foreach


c. transfer staements

      a. break
      b. continue
      c. return
      d. System.exit(0)



Conditional Statements:
=======================

if block
========

  To select some statements for execution based on condition,we use if block

syntax::

   if(boolean){
	  //statement-1
   }
      statement-2

workflow
=======
  boolean condition true means statement-1 will be executed otherwise statement-2 will be 
  executed.

eg#1.
   int x=0;
   if(x){
	System.out.println(x);
   }
   output:Compile time error

eg#2
   int x=0;
   if(x==0){
	System.out.println(x);
   }
   output:: 0

eg#3
   boolean res = false;
   if(res){
	System.out.println(res);
   }
   output:: nothing will be printed

eg#4
   boolean res=false;
   if(res=true){
	System.out.println(res);
   }
   output:: true

if - else block
===============

  To select some statements for execution and to select someOther statements based on condition,we use if-else block

syntax::

   if(boolean){
	  //statement-1
   }
   else{

     // statement-2

   }


workflow
=======
  boolean condition true means statement-1 will be executed otherwise statement-2 will be 
  executed.

Examples
========
boolean res=false;

if(res==true){
	System.out.println(res);
}
else
{
	System.out.println(res);
}

output:: false

-----------------------------------

boolean res = false;

if(res = true)
{
	System.out.println(res);
}
else
{
	System.out.println(res);
}

output:true

----------------------------------

int a =5;

if(a=6)
{
	System.out.println(a);
}
else
{
	System.out.println(a);
}

Output:: CE

----------------------------------













Transfer statement
=================
1. break
2. continue
3. return

break
  It is used to break out of the loop.
  It is used in switch to stop fall through
  It is used inside labeled block to break block execution based on some condition.

switch
=====
  int x=0;
  switch(x){
	case 0: System.out.println("hello");
		break;
	case 1: System.out.println("hiee");
  }
Output:hello

forloop
=======
  for(int i=0;i<5;i++){
	if(i==3)
	   break;
	System.out.println(i);
  }
Output::
1
2
3

Inside labeled block
====================
int x=10;
l1:{
	System.out.println("begin");
	if(x==10)
	   break l1;
	System.out.println("end");
}
    System.out.println("hello");

Output:: begin
         hello

These are the only places where we can use break othe places if we use compiler will throw an error as break outside swith or loop.

eg::
int x=10;
if(x==10)
  break;
System.out.println("hello");

output:: ce:: break outside switch or loop

continue
=======
 To skip current iteration and continue for next iteration we use continue.

eg#1.
for(int i=0;i<=5;i++){
	if(i==3)
	   continue
    System.out.println(i);
}
output::
0
1
2
4
5

eg#2.
int x=2;
for(int i=0;i<10;i++)
{
	if(i%x==0)
	   continue;
	System.out.println(i);
}
output
1
3
5
7
9

eg#3.
int x=10;
if(x==10)
  continue
System.out.println(x);
we can use continue only inside loop,if we use it any where else it would result in compile time
error saying :continue outside the loop.

labelled break and continue
===========================
l1:for(;;){
   .....
   .....
   l2:for(;;){
	.....
	.....
	.....
	l3:for(;;){
		.....
		.....
		.....
		break l1;
		break l2;
		break l3;
		.....
		.....
		.....
	}
	......
	......

   }
   ....
   ....
   ....
}

eg#1.
l1:for(int i=0;i<3;i++){
	for(int j=0;j<3;j++){
		if(i==j)
			stmt-1;
		System.out.println(i+"...."+j);
	}
   }
what is the output if the stmt-1 is replaced as shown below?
stmt-1 : break; 
stmt-1 : break l1;
stmt-1 : continue;
stmt-1 : continue l1;

dowhile with continue
=====================
  int x=0;
  do{
	++x;
	System.out.println(x);
	if(++x<5)
	  continue;
        ++x;
	System.out.println(x);
   }while(++x<10);


