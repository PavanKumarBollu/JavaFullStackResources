Strings:
========

Topics
======
->Immutable Strings and String Pool
->String Class and Methods
->StringBuffer and StringBuilder
->StringTokenizer


Strings
=======

String are objects in java,
String is nothing but a collection of charecters.
To create a String we will use the predefined class called String. String class is exits in java.lang package. and we need to keep the collection of charecters inside the double Quotes ( " " );


Syntax
======

1st Way
-------

String variableName = "Collection of Charecters";

2nd Way
-------

String variableName = new String("Collection of Charecter");

--> String Are By Default immutable (you can't change once you create a string ), if You try to change the string it will produce new String as a result.



SCP
===
String Constant Pool.


SCP Will Stores the String Which Are Created in the program for the later purpose.

even though there is no one pointing to the string in scp the string will not be removed from the scp
bcz the GC don't have the access to the SCP. when your jvm truns off then the memory for that string got deallocated(deleted).




Example:
========
	String s= "sachin";
       	System.out.println(s);//sachin
      	String s =new String("sachin");
      	System.out.println(s);//sachin

	

Example:
========

	String s1 = new String("sachin");
 	String s2 = new String("sachin");
 	System.out.println(s1==s2); //false
 	System.out.println(s1.equals(s2));//true
     	=> String class .equals method will compare the content of the object if same return true otherwise return false

Example
=======
 String s =new String("sachin");//2

      --> In this case 2 objects will be created one in the heap and the other one in the String Constant Pool, the reference will always point to Heap.

 			vs

  String s ="sachin";

          In this case only one object will be created in the SCP and it will be refered by our reference


NOTE:
=====
Object creation in SCP is always optional,1st jvm will check is any object already created with required content or not.
If it is already available then it will reuse the existing object instead of creating the  new Object.
If it is not available only then new object will be created, so we say in SCP there is no  chance of existing 2 objects with the same content. In SCP duplicates are not permitted


-->
Garbage Collector cannot access SCP Area, Even though Object does not have any reference  still object is not eligible for GC.
All SCP objects will be destroyed only at the time of JVM ShutDown.


Example:
========
 	String s = new String("sachin");
       	s.concat("tendulkar");
       	s=s.concat("IND");
       	s="sachintendulkar";

  Output:: Direct literals are always placed in SCP,Because of runtime operation if object is required to create compulsorily that 	object should be placed on the Heap,but not on SCP.

Q> 

String s1 = new String("sachin");//2
s1.concat("tendulkar");//2
s1+="IND";//2
String s2=s1.concat("MI");//2

System.out.println(s1);
System.out.println(s2);
     
Find out totally how many objects are created and how many are eligible for garbage collection?
output:  8 and gc eligible is 2

String intern() Method
======================
 Interning=> Using Heap object reference, if we want to get Corresponding SCP Object, then we need to use intern() method.
Example 1:
----------
         String s1 =new String("sachin");// One in heap(s1) and the other one in 
         String s2=s1.intern();//using s1 access object in SCP which has no 

         System.out.println(s1==s2);//false
         String s3="sachin";
         System.out.println(s2==s3);//true
Example 2:
----------

Using heap object reference, if we want to get the corresponding SCP object and if the Object does not exists, then intern() will create a new object in SCP and it returns.
      eg2::
         String s1=new String("sachin");// One in heap(s1) and the other one in SCP
         String s2=s1.concat("IND");// One in SCP(IND) and the other one in heap(s2)
         String s3=s2.intern();
         String s4="sachinIND";
 	System.out.println(s3 == s4);//true




Importance of SCP
=================
 1. In our program if any String object is required to use repeatedly then it is not recommended to create multiple object with same content  it reduces performance of the system and effects memory utilization.
 2. We can create only one copy and we can reuse the same object for every requirement. This approach improves performance and memory utilization we can achieve this by using "scp".
 3. In SCP several references pointing to same object the main disadvantage in this approach is by using one reference if we are performing any change the remaining references will be impacted. To overcome this problem sun people implemented immutability concept for String objects.
 4. According to this once we creates a String object we can't perform any changes in the existing object if we are trying to perform any changes with those changes a new String object will be created hence immutability is the main disadvantage of scp.


Note: if the class name and method name is same in a class then that method is 
called "Constructor".



 String class Constructor
 =======================

 String s = new String()     => Creates an Empty String Object
 String s =new String(String literals)    => Creates an Object with String literals on Heap

Example
========
	String str = new String("sachin");
  	String s =new String(StringBuffer sb) => Creates an equivalent String object for StringBuffer
  	String s =new String(char[] ch)  => Creates an equivalent String object for character array
  	String s =new String(byte[] b)   => Creates an equivalent String object for byte array.
 
Examples
========
 char[] ch = {'j','a','v','a'};
 String s1 =new String(ch);
 System.out.println(s1);//java
 System.out.println();

 byte[] b = {65,66,67,68};
 String s2= new String(b);
 System.out.println(s2);//"ABCD"

 StringBuffer sb =new StringBuffer("sachin");
 System.out.println("StringBuffer data is :: "+sb);
 String s1 =new String(sb);
 System.out.println("String data is : "+s1);










Important methods of String
===========================

  1.public char charAt(int index)//-->Covert into char array then use the index position to return the char
  2.public String concat(String str)
  3.public boolean equals(Object o)
  4.public boolean equalsIgnoreCase(String s)
  5.public String substring(int begin)
  6.public String substring(int begin,int end)
  7.public int length()
  8.public String replace(char old,char new)
  9.public String toLowerCase()
  10.public String toUpperCase()
  11.public String trim()
  12.public int indexOf(char ch)
  13.public int lastIndexOf(char ch)





 3.public boolean equals(Object o)

     -->It is used for Content Comparison,In String class equals() method is Overriden to check the content of the object.

  4.public boolean equalsIgnoreCase(String s)

             It is used for Content Comparison without comparing the case.
Example
=======

 public class Test {

 	public static void main(String[] args) {

 		String s ="java";
 		System.out.println(s.equals("JAVA"));//false
 		System.out.println(s.equalsIgnoreCase("JAVA"));//true
	}
}


5.public String substring(int begin)
        
	-->It gives the String from the begin index to end of the String.
             	String s="Ineeuron";
     		System.out.print(s.substring(2));//Starting from 2 to end of the string

6.public String substring(int begin,int end)

	-->It gives the String from the begin index to end-1 of the String.
             	String s="Ineeuron";
     		System.out.print(s.substring(2,6));//searching from 2 to 5 will happen

8.public String replace(char old,char new)
             String s="ababab";
     System.out.print(s.replace('a','b')); //bbbbbb

9.  public String toLowerCase();
10. public String toUpperCase();

11. public String toString();

 Note: When ever we print any reference,by default JVM will call toString() on the reference

System.out.println(name);
System.out.pritnln(name.toString());

11.public String trim()
   
-->To remove the blank spaces present at the begining and end of string but not the blank spaces present at the middle of the String.

12.public int indexOf(char ch)
-->It returns the index of 1st occurance of the specified character if the specified character is not available then it returns -1.

13.public int lastIndexOf(char ch)
-->It returns the index of last occurance of the specified character if the specified character is not available then it returns -1.


String Tokenizer:
=================

A StringTokenizer class in Java is a utility class that allows you to break a string into tokens. 
A token is a smaller unit of a string, often delimited by specific characters.




Note:
=====
While StringTokenizer is a useful tool, it's considered a legacy class. 
In modern Java applications, it's often recommended to use regular expressions or the String.split() method 
for more flexible and efficient tokenization.




Example:

import java.util.StringTokenizer;


class StringTokens
{
	public static void main(String[] args) 
	{
		String sentence = "This is a sample sentence. with delimiters, like commas and periods.";
        StringTokenizer tokenizer = new StringTokenizer(sentence, ",.");

		String mailId ="pavankumar.g@teksacademy.com";

		StringTokenizer token1 = new StringTokenizer(mailId, "@");

		while(token1.hasMoreTokens())
		{
			System.out.println(token1.nextToken());
		}

        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            System.out.println(token);
		}
	}
}
