==========================================================================
26_04_2023_spring_aop_classnotes.pdf AND 26-04_2023_spring_aop_images.pdf
==========================================================================

=>  AOP  => Aspect Oriented Programming[Java, Python, Ruby,....]

=> CrossCuttingConcern

=> CrossCuttingConcern: Move Additional classes of Project into another classes[Serviceclass/Aspectclass] and bind  when and where they are required.

=> 1. Aspect 
	It is a class that provides additional services to project. Transaction Management, Security, Encode/ Decode, Logging...etc

=> 2. Advice
	It is a method inside Aspect class/It is actual implementation of Aspect.
    	Every Advice must be connected to Type.
	Types of Advices:
		a. Before Advice
		b. After Advice
		c. Around Advice
		d. After Returning Advice 
		e. After Throwing Advice
=> 3. Pointcut

=> 4. JoinPoint

=> 5. Target

=> 6. Weaving

=> **** What is the difference b/w @After, @AfterReturning and @AfterThrowing Advices?[interview Question]

	After Advices is executed next to business method either success or failure.
  	After Returning Advices is executed next to business method only if there is not exception.
  	After Throwing Advices is executed next to business method only if there is a exception.

=> Implementation of the AOP can be done in 2 ways
	1. Spring AOP using XML Based Configuration[Legacy Style]
 	2. Spring AOP using AspectJ(Pure Annotations)

=> Required Dependency to Work With Spring AOP 

	 <dependency>
    		<groupId> org.springframework.boot </groupId>
    		<artifactId> spring-boot-starter-aop </artifactId>
 	</dependency>

=>  Annotations used are
 	a. @Aspect
 	b. @Before
 	c. @After
 	d. @Around
 	e. @AfterReturning
 	f. @AfterThrowing
 	g. @PointCut

refer:: Spring-AOP-AspectJApp

Images file
=> Some Case Studies For the AOP
=> Annotation Explanation
=> AOP Explanation
=> AOP Bookmyshow Example


===========================================================================
27_04_2023_spring_aop_classnotes.pdf
===========================================================================
 1.Aspect
 2.Advice
 3.PointCut
 4.JoinPoint
 5.Target
 6.Weaving
 7.Proxy
 Annotations
 ===========
 1.@Aspect
 2.@Before,@After,@Around,@AfterReturning,@AfterThrowing
 3.@PointCut

 =>@PointCut("execution(""))

=>  Pointcut

=>  Pointcut Syntax

 Note: Symbols allowed in PointCut Expression : .(dot),*(star)

=>  Examples

=>  Usage of AOP in Realtime environment

	Case2: If exception occurs in business method and if that exception information has to be known by Advices then we need to use
	Case3: If there is a return type in business method and if that returned value has to be known by Advices then we need to use


=> Working with the ProceedingJoinPoint
	
@Aspect
@Component
public class TransactionManagement {

	@Pointcut("execution(public * in.ineuron.dao.EmployeeDao.*())")
	public void p1() {
	}

	@Around("p1()")
	public void aroundAdvice(ProceedingJoinPoint jp) {

		System.out.println("Before Transaction");
		
		try {
			Object obj = jp.proceed();
			System.out.println("DATA IS :: "+obj);
			
		} catch (Throwable e) {
			e.printStackTrace();
		}
		
		System.out.println("After Transaction");

	}
} 




===========================================================================
01_05_2023_spring_aop_classnotes.pdf
===========================================================================

=> JoinPoint => Combination of Advice + PointCut

=> @Around => It would be used combination of @After and @Before ProceedingJoinPoint 
	=> This interface help us to make a call to business method(need to be called using proceed())


=> Realtime Usage of the Aop

=> Usage of custom annotation to support AOP
	we can create a aspect and then we can link with some annotation directly we can use that annotation on top of the methods 
	@Pointcut("@annotation(in.ineuron.annotation.MyTransaction)")
	refer: Spring-AOP-AspectJApp2 project in the note folder


=>  Runners in Springboot

=> Two types of Runners in Springboot
 	1. CommandLineRunner(I)[1.0V]
 	2. ApplicationRunner(I)[1.3V]

=>  What is the difference b/w CommandLineRunner and ApplicationRunner?

	CommandLineRunner(I)
    		|=> public void run(String... args)
	ApplicationRunner(I)
    		|=> public void run(ApplicationArguments args)

=>  What is the usage of Runners in SpringBoot Apps?

Note: In Realtime project the main class(Configuration class main class that contains @SpringBootApplication) main() method contains only SpringApplication.run() method call. The remaining logics like getting SpringBean class object IOC container, invoking b. method and etc. Now this logic can be done from run() of runner class through various injections.

Note:: We can have multiple runners in our project, if mulitple runners are available then based on Alphabetical order of class names the runners will run.  If we want a particular runner to run then we need to use  @Order.
Syntax :: @Order(any-no)


=> In case of Commandline arguments the data will be stored in the form of String[]
 Commandline Arguments :: [START, LOAD, END]
	
		refer:: SpringBoot-Runner-01



=================================================================================
02_05_2023_spring_runners_classnotes.pdf AND 02_05_2023_spring_runners_images.pdf
=================================================================================

=> Runners
  	=> CommandLineRunner(I)[1.0V]
  	=> ApplicationRunner(I)[1.3V]

=> The difference b/w the above 2 runners is they vary in the way the arguments are collected.


=> Difference b/w CommandLineRunner and ApplicationRunner?
	Ans. Working process same, only difference is in inputs.
  		CLR reads inputs from main() and stores as ArrayFormat(String[])
  		ALR reads inputs from main() and converts into Option(--key=value) and Non Option(only value) args and given to AR.

***** Note: ApplicationRunner can be used to override the value which are coming from application.properites file also.


=> Adding Custom banner to Springboot application

=> Creating our OwnBaner in Programmatic Approach

=> Working with Springboot-Mail
	1. Add the following dependencies
 		<dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-mail</artifactId>
 		</dependency>
 2. Required Bean JavaMailSender will be autoconfigured
 3. Create a Service class
 4. Set up application.properites
 5. Build main app and run the application

 Note: Before running app 
		a. login to sender email account(like gmail login),go to account letter/image
 		b. go to manage settings -> security -> change less secure apps access to ON


=> Images File

Java Mail API Methods
Difference Between the CommandLineRunner and ApplicationRunner























