==============================================================================
30_03_2023_spring_core_class_notes. AND 30_03_2023_springbootintroduction.pdf
==============================================================================

images file
=> SpringBoot Overview 

=> Base Package..?

=> @SpringBootApplication Annotation

=> Different Types of SpringBoot Application Creators 

=> how does the eclipse creates the SpringBoot project



notes pdf

=> List of Annotations 

=>  100%Code driven SpringApp development/Java Config Approach of SpringApp development

	=> Advantages 
		a. XMLBased configuration can be avoided in maximum cases
		b. Improves the readability
 		c. Debugging becomes easy
 		d. Foundation to learn SpringBoot
	=> ThumbRule
	

=>  ApplicationContext container
	1. It is an extension of BeanFactory
 	2. Implementation classes of ApplicationContext(I)
 		a. FileSystemXmlApplicationContext(standalone)
 		b. ClassPathXmlApplicationContext(standalone)
 		c. XmlWebApplicationContext(SpringMVC apps)
 		d. AnnotationConfigApplicationContext(Standaloneapp's)
 		e. AnnotationConfigWebApplicationContext(SpringMVC apps)

=> Configuration of container in pure java style
  	@Configuration
 	@ComponentScan(basePackages={"com.pavan"})
 	@Import(value=PersistConfig. class)

=>  SpringBoot ===> Spring Framework - NoXML +Autoconfiguration(pure java code) + EmbededDatabase + Embedded Server +.....


=> To work with different environments of spring application, spring boot has given few starters like
 	a. spring-boot-starter-jdbc
 	b. spring-boot-starter-mail
 	c. spring-boot-starter-aop
 	d. spring-boot-starter-datajpa
 	e. spring-boot-starter-security
 	f. spring-boot-starter.mvc

=> SpringBoot application can be created using

 	a. STS(SpringToolSuite)
 	b. Eclipse using STS
 	c. Spring.io(Intializer)
 	d. using command line runners


=>  @SpringBootApplication is equals to the following four annotation

 	=>@EnableAutoConfiguration(It enables Autoconfiguration)
 	=>@ComponentScan(Scan for the stereo type annotations in the given package and Subpackage)
 	=>@Configuration(Marking the class as Configuration class)
 	=>@PropertySource(location="application.properties")

=> Need of application.properties

=> SpringApplication.run() internally uses AnnotationConfigApplicationContext class to create an IOC container by taking java class as @Configuratio class(in fact it takes current class nothing but ClientApp cum ConfigurationClass)




============================================================================================================================
03_04_2023_springboot_class_notes.pdf
============================================================================================================================

=> List of annotations used
 ========================
 	1.@Autowired
 	2.@Component
 	3.@Service
 	4.@Repository
 	5.@Qualifier
 	6.@Primary
 	7.@Lazy
 	8.@PropertySource
 	9.@Import
 	10.@ImportResource
 	12.@ComponentScan
 	13.@Configuration
 	14.@Value
 	15.@Bean
 	16.@PostConstruct
 	17.@PreDestroy

=>  @SpringBootApplication |Is Equals To => @Configuration,@ComponentScan,@EnableAutoConfiguration

=> Difference b/w Spring vs SpringBoot(interview question)

=> There are 2 different ways to perform injection to spring bean properties

	a. @Value => It can be used to inject each value to spring bean properties
		
		using @Value
		------------
 		@Component("company)
 		@PropertySource("application.properties")
 		public class Company{
 			@Value("${org.info.companyName}")
 			private String name;

 			@Value("${org.info.companyLoc}")
			private String adress;

 			@Value("${org.info.copmanyType}")
 			private String type;

 			toString()
 		}

 	b. @ConfigurationProperties => It can be used to perform bulk injection.
	
 		using @ConfigurationProperties
				-> It perform setter level injection internally, so setters are mandatory
 		@Component("company)
 		@ConfigurationProperites(prefix= "org.info")
 		public class Company{

 			private String companyName;

 			private String companyLoc;

 			private String companyType;

 			setXXXX(),

			toString()
 		}
 

 Note: While working with @ConfigurationProperties, it is always suggested to add configuarationProcessor inside pom.xml file
 	<dependency>
 		<groupId>org.springframework.boot</groupId>
 		<artifactId>spring-boot-configuration-processor</artifactId>
 		<optional>true</optional>
 	</dependency>



=> If we try to inject two different values to same spring bean property using both @Value and @Configurationproperties, which value will be injected?

=> Usage of SPEL in @Value Annotation
	@Value("#{info.idlyPrice+info.vadaPrice+info.dosaPrice}")

=> Injection of all types from properties file

	1. Primtive type
 	2. Array type
 	3. List type
 	4. Set type
 	5. Map type
 	6. HAS-A type

=> Injecting values to different types like Arrays, List, Set, Map, HAS-A Property of SpringBean using Properties / .yml file

=>  YML/YAML Injection

=>  Rules while writing yml file

=>  What is the difference b/w properties file and .yml file?



============================================================================================================================
06_04_2023_spring_boot_class_notes.pdf AND 06_04_2023_profiles_in_springboot.pdf
============================================================================================================================

=> Profiles in SpringBoot
 	Both Spring and SpringBoot supports profiles
 	=> In all approaches of Spring app development we can use profiles
 		a. xml driven
 		b. annotation driven
 		c. 100% code configuration
 		d. SpringBoot

=> Different Types of Profiles refer images file





============================================================================================================================
07_04_2023_maven_log4j_sl4j_notes.pdf AND AppenderTypes.pdf
============================================================================================================================

=> Maven[GAV]

=> Maven Repositories

=> Maven archetype[quickstart,webapp]

=> Maven LifeCycle
 	a. clean 
	b. default 
	3. site

=>  Maven features
 	a. properites 
	b. exclusions
  
=> Maven inheritance[<parent><GAV></parent>]
  	Maven MultiModule

=>  While working with archetype webapp,we need to inform maven about 
	a. servlet-api
 	b. jstl-api
 	c. hibernate-api in pom.xml file

=>  Maven Multi-Module Project

=> Log4J and SL4J

=> What is Logging?

=> Auditing

=> Use case of Logging

=> Note:
	onsite  =>go to client org location to recieve,install,maintain the project 
	offsite =>stays in the software company to release the project and fix the production bugs given by client org.
 	offsite team is a supporting team to onsite team.

=> Every project contains the following 4 environments
 	a. Dev environment.
 	b. Testing environment.
 	c. UAT environment.
 	d. Production environment.

=> SL4J
 	->It stands for Standard Simple logging facade for Java
 	->It provides abstraction  on multiple logging api/tools/framework and provides unified api for logging by internally using our choice logging api.
 	SL4J(framework)[SUNMS]
 	log4j
 	logback
 	commons-logging

=> Log4j Advantages

	 Allows to categorize the log messages and we can add priorities for log messages.

		DEBUG<INFO<WARN<ERROR<FATAL

=> In testing environment what is the difference b/w bug and issue?
   	bug  => code exists, but the expected functionality is not coming(wrong logic)
 		egg: click on home hyperlink, redirecting to about us page.
   	issue=> feature/functionality is missing.

=> Note: In realtime for every app 2 log-files will be maintained
 	a. Common log files(records all logs messages end to end)
 	b. Exception log files(records only ERROR and FATAL level log messages.. useful when system/project is down)

=> Three important object of Log4j Programming
 ===========================================
 	a. Logger object
 	b. Appender object
 	c. Layout object



=> Log4j Architecture

	refer diagram

=> RollingFileAppender 

	if the log file size is over then it will create another file to store the logs 

=> Daily RollingFileAppender
	Everyday new log file will be created and it will keep track the logs this is used by the tom cat server check tomcat folder for more clarity



=============================================================================
08_04_20223_SpringJDBC_classnotes.pdf AND 08_04_20223_SpringJDBC_images.pdf
=============================================================================

=> SpringJDBC (SpringDAO)

=> Plain JDBC

=> SpringJDBC Advantages

=> Different approaches of developing persistence logic
	a. using JdbcTemplate
 	b. using NamedParameterJdbcTemplate
 	c. Using SimpleJdbcInsert,SimpleJdbcCall
 	d. MappingSQLOperation as subclass

=> JdbcTemplate with CallBackInterfaces
	1.RowMapper<T>
 	2.ResultSetExtractor
 	3.RowCallBackHandler

Refer Image file
=> Spring JDBC Behind The Scenes  
=> Spring ORM Behind the Scenes
=> Spring DataJPA Behind the Scenes
=> JdbcTemplate Autowiring Behind the scenes
=> Comparing the SpringJDBC Project AND SpringBootJDBCProject










===========================================================================
09_04_2023_springjdbc_class_notes.pdf AND 09_04_2023_springjdbc_images.pdf
===========================================================================

=>SpringJDBC
 	|=> JdbcTemplate(C)
 		|=> for Nonselect/DMl sql queries
 			a. public int update(String query)
 		|=> for select query
 			a. public xxxx queryXXXXX(,,)
=>  Note: 
	While performing retrieval operation, to convert the data from ResultSet Object to Business Object, 
	SpringJDBC environment has provided a predefined interface in the form of "RowMapper".
 
	public interface RowMapper<T>{
 		public Object mapRow(ResultSet rs,int rowCount);
 		}
	}

 	default implementation class is :: BeanPropertyRowMapper. This class will take care of copying the record from ResultSet to BO.

 	Expectation : colnames in dbTable and BO properties/fieldname should be same.


=> Working with ResultsetExtractor<T> callback interface

	-> if select query is executed which gives multiple records to process then we need to go for ResultSetExtractor/RowCallBackHandler

	public interface ResultSetExtractor<T> {

 		T extractData(ResultSet rs) throws SQLException, DataAccessException;
 	}

	default implementation class is :: RowMapperResultSetExtractor.
	This class will take care of keeping the record into List<BO>.

 	default implementation class is :: BeanPropertyRowMapper.
 	This class will take care of copying the record from ResultSet to BO.
 	Expectation : colnames in dbTable and BO properties/fieldname should be same.
 	
	eg::: return jdbcTemplate.query(GET_STUDENT_BY_CITY, new RowMapperResultSetExtractor<StudentBO>(
		new BeanPropertyRowMapper<StudentBO>(StudentBO.class)), city1, city2, city3);


=> Working with RowCallBackHandler<T> callback interface
 
	@FunctionalInterface
 	public interface RowCallbackHandler {
 		void processRow(ResultSet rs) throws SQLException;
 	}
 	=> A RowCallbackHandler object is typically stateful, it keeps the result state with in the object, to be availble for later inspection.

=> ResultSetExtractor(I) VS RowCallBackHandler(I) And Refer Diagram Once For more Clarity on this two 


=> NamedParameterJdbcTemplate

=> Setting the value to NamedParameterJdbcTemplate (imp)

=> SimpleJdbcCall

=> Storedprocedure



